#!/usr/bin/env python

"""

plain-test

by Heinrich Hartmann

Test file runner. Test files have the structure:

<code>
[<out-delimiter><out>]
[<err-delimiter><err>]

When run over a file, the following process is executed:

1. test-file is truncated to <code>
2. test-file is executed
3. std-out is appended to file (separated by <out-delimiter>)
4. std-err is appended to file (separated by <err-delimiter>)

Here is an example:

ls.test
> #!/bin/sh
> ls -l
> 
> === stdout ===
> total 24
> -rwxrwxrwx 1 hartmann hartmann 631 Mar  6 17:15 curl.test
> -rwxrwxrwx 1 hartmann hartmann 104 Mar  6 16:55 curl.test~
> -rwxrwxrwx 1 hartmann hartmann 122 Mar  6 17:15 hellopy.test
> -rwxrwxrwx 1 hartmann hartmann  61 Mar  6 16:42 hellopy.test~
> -rwxrwxrwx 1 hartmann hartmann  16 Mar  6 17:15 ls.test
> -rwxrwxrwx 1 hartmann hartmann   6 Mar  6 16:54 ls.test~
> 
> === stderr ===
> 
> 


"""

import os, sys
import subprocess as sp
from __future__ import print_function

OUT_DELIMITER = "=== stdout ==="
ERR_DELIMITER = "=== stderr ==="

VERBOSE = True

def testDir(dir):
    if VERBOSE:
        sys.stdout.write("Testing directory " + dir + "\n")

    for file_name in os.listdir(dir):
        file_path = os.path.join(dir,file_name)
        if not os.path.isfile(file_path): continue
        if not file_name.endswith(".test"): continue
        testFile(file_path)

def testFile(file_path):
    """
    file consists of three parts:
    <code><delimiter><output>
    code is executed and output replaced with the output of the command.
    """

    if VERBOSE:
        sys.stdout.write("Running " + file_path + "\n")

    # truncate file at line containing DELIMITER
    with open(file_path,"rw+", 1) as fh:
        pos = 0
        while True:
            line = fh.readline()
            if line == "": # EOF
                break
            if line == OUT_DELIMITER or line == ERR_DELIMITER:
                fh.truncate(pos)
                break
            if line != "\n": # truncate trailing new-lines
                pos = fh.tell()

    os.chmod(file_path,0777)

    output, error = sp.Popen(
        os.path.abspath(file_path), # . is not in path
        stdout=sp.PIPE, stderr=sp.PIPE
    ).communicate()

    with open(file_path,"a") as fh:
        fh.write("\n" + OUT_DELIMITER + "\n")
        fh.write(output)
        fh.write("\n" + ERR_DELIMITER + "\n")
        fh.write(error)
        fh.write("\n")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        args = sys.argv[1:]
    else:
        args = ["."]
        
    for arg in args:
        if os.path.isfile(arg):
            testFile(arg)
        elif os.path.isdir(arg):
            testDir(arg)
